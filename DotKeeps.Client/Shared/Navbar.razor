@inject NavigationManager NavigationManager
@implements IDisposable

<nav class="relative flex flex-col min-w-64">
    <div class="flex shrink-0 justify-between items-center h-12 md:h-24 px-3 md:px-6 bg-black text-white">
        <a href="" class="flex items-center gap-2 md:gap-3">
            <SvgIcon Data="@IconsData.MedievalCastle" class="text-2xl" />
            <p class="text-xl md:text-2xl font-bold">DotKeeps</p>
        </a>
        <button @onclick="ToggleNavMenu" class="md:hidden transition-transform @(collapseNavMenu? null : "rotate-90")">
            <SvgIcon Data="@IconsData.HamburguerMenu" class="text-2xl" />
        </button>
    </div>
    @if (!collapseNavMenu)
    {
        <div class="z-40 absolute md:hidden flex flex-col gap-3 w-full mt-12 px-3 pb-3 bg-black text-white text-lg"
            @onclick="ToggleNavMenu">
            @foreach (var Tab in Tabs)
            {
                <NavLink href="@Tab.name" Match="NavLinkMatch.All">
                    <p>@Tab.label</p>
                </NavLink>
            }
            <div class="grid grid-cols-2 gap-2">
                @if (CurrentPage != "login")
                {
                    <CustomButton Label="Login" Theme="primary" Action="Login" />
                }
                @if (CurrentPage != "register")
                {
                    <CustomButton Label="Register" Theme="action" Action="Register" />
                }
            </div>
        </div>
    }
    <div class="hidden md:flex flex-col gap-6 h-full px-6 bg-black text-xl text-white overflow-auto"
        @onclick="ToggleNavMenu">
        @foreach (var Tab in Tabs)
        {
            <NavLink href="@Tab.name" Match="NavLinkMatch.All">
                <p>@Tab.label</p>
            </NavLink>
        }
        <div class="grid grid-cols-2 gap-4">
            @if (CurrentPage != "login")
            {
                <CustomButton Label="Login" Theme="primary" Action="Login" />
            }
            @if (CurrentPage != "register")
            {
                <CustomButton Label="Register" Theme="action" Action="Register" />
            }
        </div>
    </div>
</nav>

<style>
    a[aria-current="page"] {
        color: #1b6ec2;
        font-weight: 500;
    }
</style>

@code {

    private class NavMenuTab
    {
        public string name { get; private set; } = String.Empty;
        public string label { get; private set; } = String.Empty;

        public NavMenuTab(string name, string label)
        {
            this.name = name;
            this.label = label;
        }
    }

    private NavMenuTab[] Tabs = [new NavMenuTab("", "Home"),
new NavMenuTab("following", "Following")];

    private bool collapseNavMenu = true;


    private string CurrentPage = String.Empty;

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        ChangeCurrentPageName(args.Location);
    }

    private string GetPageName(string uri)
    {
        var uriSegments = new Uri(uri).Segments;
        var pageName = uriSegments[uriSegments.Length - 1];
        return pageName;
    }

    private void ChangeCurrentPageName(string uri)
    {
        CurrentPage = GetPageName(uri);
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/register");
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        ChangeCurrentPageName(NavigationManager.Uri);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}
