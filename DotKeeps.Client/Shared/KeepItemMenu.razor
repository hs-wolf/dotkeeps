@using DotKeeps.Shared

@if (Item != null)
{
  <div class="flex flex-col @(Deleting ? "pointer-events-none" : null)">
  @if (Item.Type != KeepItemType.NONE)
    {
      <div class="flex items-end gap-1 md:gap-1 break-all">
        @if (ShowFieldLink && !String.IsNullOrEmpty(Item?.Link))
        {
          <a href="@Item.Link" target="_blank"
            class="flex items-center py-2 px-3 text-xs md:text-sm bg-gradient-to-b from-blue-600 to-blue-700 text-white rounded-t-sm break-normal">
            Link
          </a>
        }
        <p
          class="flex items-center py-1 px-2 md:px-3 text-xs md:text-sm bg-gradient-to-b from-purple-600 to-purple-700 text-white rounded-t-sm break-normal">
          @(Formatters.CapitalizeFirstLetter(Item.Type.ToString() ?? ""))
        </p>
        @if (ShowFieldSeason && !String.IsNullOrEmpty(Item?.Season))
        {
          <p
            class="flex items-center py-1 px-2 md:px-3 text-xs md:text-sm bg-gradient-to-b from-purple-600 to-purple-700 text-white rounded-t-sm">
            @("Season " + Item.Season)
          </p>
        }
        @if (ShowFieldEpisode && !String.IsNullOrEmpty(Item?.Episode))
        {
          <p
            class="flex items-center py-1 px-2 md:px-3 text-xs md:text-sm bg-gradient-to-b from-purple-600 to-purple-700 text-white rounded-t-sm">
            @("Episode " + Item.Episode)
          </p>
        }
        @if (ShowFieldVolume && !String.IsNullOrEmpty(Item?.Volume))
        {
          <p
            class="flex items-center py-1 px-2 md:px-3 text-xs md:text-sm bg-gradient-to-b from-purple-600 to-purple-700 text-white rounded-t-sm">
            @("Volume " + Item.Volume)
          </p>
        }
        @if (ShowFieldChapter && !String.IsNullOrEmpty(Item?.Chapter))
        {
          <p
            class="flex items-center py-1 px-2 md:px-3 text-xs md:text-sm bg-gradient-to-b from-purple-600 to-purple-700 text-white rounded-t-sm">
            @("Chapter " + Item.Chapter)
          </p>
        }
      </div>
    }
    <button
      class="flex justify-between items-center md:gap-2 p-2 md:p-3 bg-neutral-200 rounded-tr-sm @(ShowMenu ? "rounded-b-none" : "rounded-b-sm")"
      @onclick="ToggleShowMenu">
      <p class="flex gap-2 md:text-lg text-start">
        @Item?.Name
      </p>
      <span class="self-start transition-transform @(ShowMenu ? "rotate-180" : null)">
        <SvgIcon Data="@IconsData.ChevronDown" class="text-xl md:text-2xl" />
      </span>
    </button>
    @if (ShowMenu)
    {
      <div class="flex flex-col gap-2 p-2 md:p-3 bg-neutral-300 rounded-b-sm">
        @if (Editing)
        {
          <div class="flex flex-col md:flex-row md:items-center gap-2">
            <InputSelect @bind-Value="Item.Type" class="w-full md:w-auto h-8 md:h-10 px-2 md:px-3 bg-white rounded-sm">
              @foreach (KeepItemType Type in Enum.GetValues(typeof(KeepItemType)))
              {
                <option value="@Type">@Formatters.CapitalizeFirstLetter(Type.ToString())</option>
              }
            </InputSelect>
            <InputText @bind-Value="Item.Name" class="custom-input" placeholder="Name" />
          </div>
          @if (!ShowTypeNone)
          {
            <div class="grid grid-cols-2 md:flex gap-2">
              @if (ShowFieldSeason)
              {
                <div class="flex flex-col gap-1">
                  <label for="season" class="text-sm md:text-base">Season</label>
                  <InputText @bind-Value="Item.Season" name="season" class="custom-input md:max-w-32" placeholder="Season" />
                </div>
              }
              @if (ShowFieldEpisode)
              {
                <div class="flex flex-col gap-1">
                  <label for="episode" class="text-sm md:text-base">Episode</label>
                  <InputText @bind-Value="Item.Episode" name="episode" class="custom-input md:max-w-32" placeholder="Episode" />
                </div>
              }
              @if (ShowFieldVolume)
              {
                <div class="flex flex-col gap-1">
                  <label for="volume" class="text-sm md:text-base">Volume</label>
                  <InputText @bind-Value="Item.Volume" name="volume" class="custom-input md:max-w-32" placeholder="Volume" />
                </div>
              }
              @if (ShowFieldChapter)
              {
                <div class="flex flex-col gap-1">
                  <label for="chapter" class="text-sm md:text-base">Chapter</label>
                  <InputText @bind-Value="Item.Chapter" name="chapter" class="custom-input md:max-w-32" placeholder="Chapter" />
                </div>
              }
            </div>
            @if (ShowFieldLink)
            {
              <div class="flex flex-col gap-1.5 mt-1">
                <div class="flex items-center gap-1">
                  <InputCheckbox name="show-link" @bind-Value="ShowLink" class="w-5 h-5" />
                  <label for="show-link" class="text-sm md:text-base">Link</label>
                </div>
                @if (ShowLink)
                {
                  <InputText @bind-Value="Item.Link" name="link-input" class="custom-input" placeholder="Link" />
                }
              </div>
            }
          }
        }
        <div class="flex justify-end items-center gap-2 md:gap-3 w-full md:w-auto">
          @if (Editing)
          {
            <button @onclick="ToggleEditing">
              <SvgIcon Data="@IconsData.CircleCheck" class="text-2xl md:text-3xl text-green-700" />
            </button>
          }
          else
          {
            <button @onclick="ToggleEditing">
              <SvgIcon Data="@IconsData.TagEdit" class="text-2xl md:text-3xl text-blue-700" />
            </button>
          }
          <button @onclick="ToggleConfirmDelete">
            <SvgIcon Data="@IconsData.TrashCan" class="text-2xl md:text-3xl text-red-700" />
          </button>
        </div>
      </div>
    }
  </div>
}

@if (Deleting)
{
  <div class="z-30 fixed inset-0 flex justify-center items-center p-3 md:p-6 bg-black/50">
  <div class="flex flex-col gap-3 md:gap-6 p-3 md:p-6 bg-white rounded-sm w-full md:max-w-[512px]">
    <p>Are you sure you want to delete this item?</p>
    <div class="grid grid-cols-2 gap-2 md:gap-4">
      <CustomButton Label="Back" Action="ToggleConfirmDelete" />
      <CustomButton Label="Confirm" Theme="danger" Action="ConfirmDelete" />
    </div>
  </div>
</div>
}

@code {
  [Parameter] public KeepItem? Item { get; set; }

  [Parameter] public EventCallback Delete { get; set; }
  [Parameter] public EventCallback Update { get; set; }

  private bool ShowMenu = false;
  private bool Editing = false;
  private bool Deleting = false;
  private bool ShowLink = false;

  private bool ShowTypeNone => Item?.Type == KeepItemType.NONE;
  private bool ShowTypeSerie => Item?.Type == KeepItemType.SERIE;
  private bool ShowTypeMovie => Item?.Type == KeepItemType.MOVIE;
  private bool ShowTypeComic => Item?.Type == KeepItemType.COMIC;
  private bool ShowTypeAnime => Item?.Type == KeepItemType.ANIME;
  private bool ShowTypeManga => Item?.Type == KeepItemType.MANGA;
  private bool ShowTypeManhua => Item?.Type == KeepItemType.MANHUA;
  private bool ShowTypeManhwa => Item?.Type == KeepItemType.MANHWA;

  private bool ShowFieldSeason => ShowTypeSerie || ShowTypeAnime;
  private bool ShowFieldEpisode => ShowTypeSerie || ShowTypeAnime;
  private bool ShowFieldVolume => ShowTypeComic || ShowTypeManga || ShowTypeManhua || ShowTypeManhwa;
  private bool ShowFieldChapter => ShowTypeComic || ShowTypeManga || ShowTypeManhua || ShowTypeManhwa;
  private bool ShowFieldLink => ShowTypeSerie || ShowTypeComic || ShowTypeAnime || ShowTypeManga || ShowTypeManhua ||
  ShowTypeManhwa;

  void ToggleShowMenu()
  {
    ShowMenu = !ShowMenu;
    if (!ShowMenu)
    {
      Editing = false;
    }
  }

  void ToggleEditing()
  {
    Editing = !Editing;
    if (!Editing)
    {
      ShowMenu = false;
      Update.InvokeAsync();
    }
  }

  void ToggleConfirmDelete()
  {
    Deleting = !Deleting;
  }

  private void ConfirmDelete()
  {
    Deleting = false;
    Delete.InvokeAsync();
  }

  protected override void OnInitialized()
  {
    if (!String.IsNullOrEmpty(Item.Link))
    {
      ShowLink = true;
    }
  }
}